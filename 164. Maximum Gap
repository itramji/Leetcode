// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Arrays;
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        //int[] arr = {3, 6, 9, 1};
        //int[] arr = {7, 14, 21, 28, 500000};
        //int[] arr ={3478,22602,20404,6739,16790,10588,16521,6644,20880,32683};
        int[] arr = {15252,16764,27963,7817,26155,20757,3478,22602,20404,6739,16790,10588,16521,6644,20880,15632,27078,25463,20124,15728,30042,16604,17223,4388,23646,32683,23688,12439,30630,3895,7926,22101,32406,21540,31799,3768,26679,21799,23740};
        maximumGap(arr);
    }

    public static int maximumGap(int[] nums) {
        int min = nums[0], max = nums[0], n = nums.length;
        for (int x : nums) {
            min = Math.min(min, x);
            max = Math.max(max, x);
        }
        System.out.println(min+"-----"+max);
        if (min == max) return 0; // All elements are the same
        int bucketSize = (int) Math.ceil((double) (max - min) / (n - 1));
            System.out.println(bucketSize);
            
             System.out.println("------"+n+"-----");
        int[] minBucket = new int[n];
        int[] maxBucket = new int[n];
        Arrays.fill(minBucket, Integer.MAX_VALUE);
        Arrays.fill(maxBucket, Integer.MIN_VALUE);
        
        //System.out.println(minBucket);
        int count=0;
        for (int x : nums) {
            //int idx = (x-min) / bucketSize;
            double index = (double) (x / (double)bucketSize);
            int idx = Math.max(0, (int) Math.round(index)-1);
            System.out.println();
             System.out.println(idx+"-----"+x+"----"+min+"-----"+bucketSize+"----"+count);
            // System.out.println();
             count++;
            minBucket[idx] = Math.min(x, minBucket[idx]);
            maxBucket[idx] = Math.max(x, maxBucket[idx]);
        }
        int maxGap = bucketSize; // Maximum gap is always greater or equal to bucketSize
        int previous = maxBucket[0]; // We always have 0th bucket
        for (int i = 1; i < n; i++) {
            if (minBucket[i] == Integer.MAX_VALUE) continue; // Skip empty bucket
            maxGap = Math.max(maxGap, minBucket[i] - previous);
            previous = maxBucket[i];
        }
        
           System.out.println("-------"+maxGap+"-----");
        return maxGap;
    }
}
